<Project Sdk="Microsoft.NET.Sdk.Web">

    <PropertyGroup>
        <TargetFramework>net9.0</TargetFramework>
        <Nullable>enable</Nullable>
        <IsPackable>false</IsPackable>
        <SpaRoot>ClientApp\</SpaRoot>
        <SpaProxyServerUrl>https://localhost:44410</SpaProxyServerUrl>
        <SpaProxyLaunchCommand>npm start</SpaProxyLaunchCommand>
        <ImplicitUsings>enable</ImplicitUsings>
        <LangVersion>13</LangVersion>
    </PropertyGroup>

    <ItemGroup>
        <PackageReference Include="ClosedXML" Version="0.105.0" />
        <PackageReference Include="Duende.BFF" Version="3.0.0" />
        <PackageReference Include="Duende.BFF.Yarp" Version="3.0.0" />
        <PackageReference Include="IdentityModel" Version="7.0.0" />
        <PackageReference Include="MediatR" Version="13.0.0" />
        <PackageReference Include="Microsoft.AspNetCore.Authentication.JwtBearer" Version="9.0.7" />
        <PackageReference Include="Microsoft.AspNetCore.Authentication.OpenIdConnect" Version="9.0.7" />
        <PackageReference Include="Microsoft.AspNetCore.SpaProxy" Version="9.0.7" />
        <PackageReference Include="Newtonsoft.Json" Version="13.0.3" />
        <PackageReference Include="Serilog.AspNetCore" Version="9.0.0" />
        <PackageReference Include="Serilog.Extensions.Hosting" Version="9.0.0" />
        <PackageReference Include="Serilog.Sinks.AzureApp" Version="3.1.0" />
        <PackageReference Include="Serilog.Sinks.Console" Version="6.0.0" />
        <PackageReference Include="Serilog.Sinks.RollingFile" Version="3.3.0" />
        <PackageReference Include="Swashbuckle.AspNetCore" Version="9.0.3" />
        <PackageReference Include="CSharpFunctionalExtensions" Version="3.6.0" />
        <PackageReference Include="LanguageExt.Core" Version="4.4.9" />
    </ItemGroup>

    <ItemGroup>
        <!-- Don't publish the SPA source files, but do show them in the project files list -->
        <Content Remove="$(SpaRoot)**" />
        <Content Include="ClientApp\src\package.json" />
        <None Remove="$(SpaRoot)**" />
        <None Include="$(SpaRoot)**" Exclude="$(SpaRoot)node_modules\**" />
    </ItemGroup>

    <ItemGroup>
      <Folder Include="ClientApp\src\app\core" />
      <Folder Include="ClientApp\src\app\directives" />
      <Folder Include="ClientApp\src\app\features\search" />
      <Folder Include="ClientApp\src\app\guards" />
      <Folder Include="ClientApp\src\app\modules\batting-records\components" />
      <Folder Include="ClientApp\src\app\pipes" />
    </ItemGroup>

    <Target Name="DebugEnsureNodeEnv" BeforeTargets="Build" Condition=" '$(Configuration)' == 'Debug' And !Exists('$(SpaRoot)node_modules') ">
        <!-- Ensure Node.js is installed -->
        <Exec Command="node --version" ContinueOnError="true">
            <Output TaskParameter="ExitCode" PropertyName="ErrorCode" />
        </Exec>
        <Error Condition="'$(ErrorCode)' != '0'" Text="Node.js is required to build and run this project. To continue, please install Node.js from https://nodejs.org/, and then restart your command prompt or IDE." />
        <Message Importance="high" Text="Restoring dependencies using 'npm'. This may take several minutes..." />
        <Exec WorkingDirectory="$(SpaRoot)" Command="npm install" />
    </Target>

    <Target Name="PublishRunWebpack" AfterTargets="ComputeFilesToPublish">
        <!-- As part of publishing, ensure the JS resources are freshly built in production mode -->
        <Exec WorkingDirectory="$(SpaRoot)" Command="npm install" />
        <Exec WorkingDirectory="$(SpaRoot)" Command="node ./bin/update-timestamp.js" />
        <Exec WorkingDirectory="$(SpaRoot)" Command="npm run build --prod" />

        <!-- Include the newly-built files in the publish output -->
        <ItemGroup>
            <DistFiles Include="$(SpaRoot)dist\**; $(SpaRoot)dist-server\**" />
            <ResolvedFileToPublish Include="@(DistFiles-&gt;'%(FullPath)')" Exclude="@(ResolvedFileToPublish)">
                <RelativePath>wwwroot\%(RecursiveDir)%(FileName)%(Extension)</RelativePath>
                <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
                <ExcludeFromSingleFile>true</ExcludeFromSingleFile>
            </ResolvedFileToPublish>
        </ItemGroup>
    </Target>

    <Target Name="MoveAngularFiles" AfterTargets="Publish">
        <ItemGroup>
            <AngularFiles Include="$(PublishDir)wwwroot\browser\**\*" />
        </ItemGroup>

        <!-- Move files from wwwroot/browser to wwwroot -->
        <Copy SourceFiles="@(AngularFiles)"
              DestinationFiles="@(AngularFiles->'$(PublishDir)wwwroot\%(RecursiveDir)%(Filename)%(Extension)')"
              SkipUnchangedFiles="true" />

        <!-- Delete wwwroot/browser -->
        <RemoveDir Directories="$(PublishDir)wwwroot\browser" />
    </Target>
</Project>
